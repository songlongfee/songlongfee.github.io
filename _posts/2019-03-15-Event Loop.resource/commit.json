{"compress":true,"commitItems":[["ffa2b63a-7758-4ee5-8c76-ba53979de2c5",1553053244083,"---\nlayout:     post\ntitle:      Event Loop 执行栈 任务队列\nsubtitle:   \ndate:       2019-03-15\nauthor:     Song\nheader-img: img/post-bg-coding.jpg\ncatalog: true\ntags:\n    - event loop 异步 执行栈 任务队列\n---\n\n一个典型的例子\n```\nsetTimeout(function(){console.log(1);}, 0);\nconsole.log(2);\n```\n执行结果为始终为 2 1\nJavaScript异步执行运行机制:\n1.所有同步任务都在主线程上执行，形成一个执行栈。\n2.线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n3.一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"。\n3.主线程不断重复上面的第三步。\n只要主线程空了，就会去读取\"任务队列\"。\n主线程从\"任务队列\"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。\n",[[1553053207782,["Administrator@PC-20181117PMVI",[[1,284,"\n"]],[283,283],[284,284]]],[1553053218569,["Administrator@PC-20181117PMVI",[[1,526,"\n"]],[525,525],[526,526]]],[1553053218729,["Administrator@PC-20181117PMVI",[[1,527,"\n"]],[526,526],[527,527]]],[1553053220697,["Administrator@PC-20181117PMVI",[[1,527,"所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。"]],[527,527],[600,600]]],[1553053257435,["Administrator@PC-20181117PMVI",[[1,284,"[Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)"]],[284,284],[352,352]]],[1553053279972,["Administrator@PC-20181117PMVI",[[1,353,"\n"]],[352,352],[353,353]]],[1553053280781,["Administrator@PC-20181117PMVI",[[1,353,"http://www.ruanyifeng.com/blog/2014/10/event-loop.html"]],[353,353],[407,407]]],[1553053282261,["Administrator@PC-20181117PMVI",[[-1,353,"http://www.ruanyifeng.com/blog/2014/10/event-loop.html"]],[407,407],[353,353]]],[1553053291963,["Administrator@PC-20181117PMVI",[[1,353,"所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。"]],[353,353],[426,426]]],[1553053294399,["Administrator@PC-20181117PMVI",[[1,427,"\n"]],[426,426],[427,427]]],[1553053299797,["Administrator@PC-20181117PMVI",[[1,284,"\n"]],[283,283],[284,284]]],[1553053313838,["Administrator@PC-20181117PMVI",[[1,284,"setTimeout（）"]],[284,284],[296,296]]],[1553053314473,["Administrator@PC-20181117PMVI",[[-1,294,"（）"]],[296,296],[294,294]]],[1553053341507,["Administrator@PC-20181117PMVI",[[1,294,"()/console.log(2)为同步任务，在主线程中执行，setTimeouthui"]],[294,294],[338,338]]],[1553053342363,["Administrator@PC-20181117PMVI",[[-1,335,"hui"]],[338,338],[335,335]]],[1553053352013,["Administrator@PC-20181117PMVI",[[1,335,"回调函数为异步任务，"]],[335,335],[345,345]]],[1553053385250,["Administrator@PC-20181117PMVI",[[1,345,"setTimeout执行后将回调函数加入任务队列"]],[345,345],[369,369]]],[1553053443903,["Administrator@PC-20181117PMVI",[[1,369,"，待主线程任务执行完成后"]],[369,369],[381,381]]],[1553053507273,["Administrator@PC-20181117PMVI",[[1,381,"开始执行任务队列中的可执行任务。"]],[381,381],[397,397]]],[1553053508683,["Administrator@PC-20181117PMVI",[[1,398,"\n"]],[397,397],[398,398]]],[1553053536770,["Administrator@PC-20181117PMVI",[[1,398,"所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。"]],[398,398],[471,471]]],[1553053538826,["Administrator@PC-20181117PMVI",[[1,398,"\n"]],[397,397],[398,398]]],[1553053540946,["Administrator@PC-20181117PMVI",[[1,473,"\n"]],[472,472],[473,473]]],[1553053543954,["Administrator@PC-20181117PMVI",[[1,543,"\n"]],[542,542],[543,543]]],[1553053548904,["Administrator@PC-20181117PMVI",[[-1,544,"所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n"]],[543,617],[543,543]]],[1553053549416,["Administrator@PC-20181117PMVI",[[-1,544,"\n"]],[543,543],[542,542]]]],null,"Administrator@PC-20181117PMVI"],["aeb42fdb-df6e-49dd-b9e2-b77a826e6e09",1553058931026,"---\nlayout:     post\ntitle:      Event Loop 执行栈 任务队列\nsubtitle:   \ndate:       2019-03-15\nauthor:     Song\nheader-img: img/post-bg-coding.jpg\ncatalog: true\ntags:\n    - event loop 异步 执行栈 任务队列\n---\n\n一个典型的例子\n```\nsetTimeout(function(){console.log(1);}, 0);\nconsole.log(2);\n```\n执行结果为始终为 2 1\nsetTimeout()/console.log(2)为同步任务，在主线程中执行，setTimeout回调函数为异步任务，setTimeout执行后将回调函数加入任务队列，待主线程任务执行完成后开始执行任务队列中的可执行任务。\n\n所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n\n[Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\nJavaScript异步执行运行机制:\n1.所有同步任务都在主线程上执行，形成一个执行栈。\n2.线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n3.一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"。\n3.主线程不断重复上面的第三步。\n只要主线程空了，就会去读取\"任务队列\"。\n主线程从\"任务队列\"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。\n\n所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n",[[1553058926056,["Administrator@PC-20181117PMVI",[[-1,786,"所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n"]],[785,859],[785,785]]],[1553058926529,["Administrator@PC-20181117PMVI",[[-1,785,"\n"]],[785,785],[784,784]]]],null,"Administrator@PC-20181117PMVI"],["fa9a1d80-7077-4262-8334-098fd5cf210b",1553059551271,"---\nlayout:     post\ntitle:      Event Loop 执行栈 任务队列\nsubtitle:   \ndate:       2019-03-15\nauthor:     Song\nheader-img: img/post-bg-coding.jpg\ncatalog: true\ntags:\n    - event loop 异步 执行栈 任务队列\n---\n\n一个典型的例子\n```\nsetTimeout(function(){console.log(1);}, 0);\nconsole.log(2);\n```\n执行结果为始终为 2 1\nsetTimeout()/console.log(2)为同步任务，在主线程中执行，setTimeout回调函数为异步任务，setTimeout执行后将回调函数加入任务队列，待主线程任务执行完成后开始执行任务队列中的可执行任务。\n\n所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。\n\n[Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n\nJavaScript异步执行运行机制:\n1.所有同步任务都在主线程上执行，形成一个执行栈。\n2.线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n3.一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"。\n3.主线程不断重复上面的第三步。\n只要主线程空了，就会去读取\"任务队列\"。\n主线程从\"任务队列\"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。\n",[[1553059547368,["Administrator@PC-20181117PMVI",[[1,739,"一个可执行"]],[739,739],[744,744]]]],null,"Administrator@PC-20181117PMVI"]]}